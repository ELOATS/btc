package main

//v1
//1. 定义结构: 前区块哈希、当前区块哈希、数据(目前使用字节流)
//2. 创建区块,对Block的每一个字段填充数据即可
//3. 生成哈希,为了生成区块哈希，我们实现一个简单的方法来计算哈希值，没有随机数、难度值
//4. 引入区块链:创建区块链，使用Block切片模拟；实现创建区块链的方法，在创 建的时候添加一个区块（创始块）
//5. 添加区块
//6. 重构代码

//v2
//1. 定义一个工作量证明的结构ProofOfWork: block,target
//2. 提供创建POW的函数NewProofOfWork()
//3. 提供不断计算哈希的方法Run()
//4. 提供一个校验函数IsValid()

//v3
//1. blot数据库介绍：轻量级的、开源的；go实现;key->value进行读取(map) []byte->[]byte
//2. BlockChain结构重写：使用数据库代替切片
//3. NewBlockChain函数重写：对 数据库操作，创建数据库
//4. AddBlock方法重写：对数据库的读取和写入
//5. 打印数据：对数据库的遍历(迭代器iterator)
//6. 命令行

/*
v4
1. 交易输入（TXInput）
	 指明交易发起人可支付资金的来源，包含：引用utxo所在交易的ID、所消费utxo在output中的索引、解锁脚本(签名、公钥)
2. 交易输出（TXOutput）
	 包含资金接收方的相关信息，包含：接收金额(数字)、锁定脚本(对方公钥的哈希，这个哈希可以通过地址反推出来)
3. 定义交易结构
4. 设置交易ID,SetTXID方法
	 一般是交易结构的哈希值
5. 实现挖矿交易函数NewCoinbaseTx()
6. 使用Transaction改写程序：改写block结构、根据提示修改(逐个文件处理)、使用strings blockChain.db命令查看
 */

//v5
//1. 创建密钥对->公钥->地址
//a.使用椭圆曲线算法生成私钥
//b.由私钥生成公钥
//用公钥生成地址
//保存私钥公钥：钱包wallet.dat(保存所有的公钥、私钥、地址)
//2. 使用地址，公钥私钥改写代码
//3. 交易签名校验
//私钥签名：创建交易时使用私钥对交易进行签名
//校验：打包交易之前对交易校验


func main() {
	//bc := NewBlockChain("xiaohong")
	//defer bc.db.Close()
	//cli := CLI{bc}
	cli := CLI{}
	cli.Run()
}
